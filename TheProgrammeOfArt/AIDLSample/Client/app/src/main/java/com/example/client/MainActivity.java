package com.example.client;import android.content.ComponentName;import android.content.Context;import android.content.Intent;import android.content.ServiceConnection;import android.os.Bundle;import android.os.Handler;import android.os.IBinder;import android.os.Message;import android.os.RemoteException;import android.util.Log;import android.view.View;import android.widget.Button;import androidx.annotation.NonNull;import androidx.appcompat.app.AppCompatActivity;import com.example.server.Book;import com.example.server.BookController;import com.example.server.IOnNewBookArrivedListener;import com.example.utils.LogUtils;import java.util.List;public class MainActivity extends AppCompatActivity implements View.OnClickListener {    private static final int MESSAGE_NEW_BOOK_ARRIVED = 1;    private BookController bookController;    private boolean connected;    private List<Book> bookList;    private  Handler mHandler = new Handler(){        @Override        public void handleMessage(@NonNull Message msg) {            super.handleMessage(msg);            switch (msg.what){                case MESSAGE_NEW_BOOK_ARRIVED:                    LogUtils.i("receive new book: "+msg.obj);                    break;                default:                    super.handleMessage(msg);                    break;            }        }    };    private ServiceConnection serviceConnection = new ServiceConnection() {        @Override        public void onServiceConnected(ComponentName componentName, IBinder service) {            try {                bookController = BookController.Stub.asInterface(service);                connected = true;                bookController.registerListener(mOnNewBookArrivedListener);            } catch (RemoteException e) {                e.printStackTrace();            }        }        @Override        public void onServiceDisconnected(ComponentName componentName) {            connected = false;        }    };    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_main);        Button btnGetBookList = findViewById(R.id.btn_getBookList);        Button btnAddBookInOut = findViewById(R.id.btn_addBook_inOut);        btnGetBookList.setOnClickListener(this);        btnAddBookInOut.setOnClickListener(this);        bindService();    }    private void bindService() {        Intent intent = new Intent();        intent.setPackage("com.example.server");        intent.setAction("com.example.server.action");        bindService(intent,serviceConnection, Context.BIND_AUTO_CREATE);    }    @Override    public void onClick(View view) {        switch (view.getId()){            case R.id.btn_getBookList:                if (connected){                    try {                        bookList = bookController.getBookList();                    } catch (RemoteException e) {                        e.printStackTrace();                    }                    log();                }                break;            case R.id.btn_addBook_inOut:                if (connected){                    Book book = new Book("刺杀骑士团长 InOut");                    try {                        bookController.addBookInOut(book);                        LogUtils.i("向服务器以InOut方式添加了一本新书");                        LogUtils.i("新书名："+book.getName());                    } catch (RemoteException e) {                        e.printStackTrace();                    }                }                break;        }    }    private void log() {        for (Book book: bookList){            LogUtils.i(book.toString());        }    }    private IOnNewBookArrivedListener mOnNewBookArrivedListener = new IOnNewBookArrivedListener.Stub() {        @Override        public void onNewBookArrived(Book newBook) throws RemoteException {          mHandler.obtainMessage(MESSAGE_NEW_BOOK_ARRIVED, newBook).sendToTarget();        }    };    @Override    protected void onDestroy() {        super.onDestroy();        if (bookController!=null&&bookController.asBinder().isBinderAlive()){            try {                LogUtils.i("unregister listener: "+mOnNewBookArrivedListener);                bookController.unregisterListener(mOnNewBookArrivedListener);            } catch (RemoteException e) {                e.printStackTrace();            }        }    }}